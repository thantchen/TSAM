// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TsaData.Models;

public partial class TsaContext : DbContext
{
    public TsaContext(DbContextOptions<TsaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AddLog> AddLogs { get; set; }

    public virtual DbSet<AddLogFile> AddLogFiles { get; set; }

    public virtual DbSet<AddType> AddTypes { get; set; }

    public virtual DbSet<ChangeLog> ChangeLogs { get; set; }

    public virtual DbSet<ChangeLogFile> ChangeLogFiles { get; set; }

    public virtual DbSet<ChangeResolutionLog> ChangeResolutionLogs { get; set; }

    public virtual DbSet<DisputeDiscrepancy> DisputeDiscrepancies { get; set; }

    public virtual DbSet<DisputeLog> DisputeLogs { get; set; }

    public virtual DbSet<DisputeLogFile> DisputeLogFiles { get; set; }

    public virtual DbSet<DisputeType> DisputeTypes { get; set; }

    public virtual DbSet<ExcelFailure> ExcelFailures { get; set; }

    public virtual DbSet<Exception> Exceptions { get; set; }

    public virtual DbSet<FileRepository> FileRepositories { get; set; }

    public virtual DbSet<FileType> FileTypes { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<LogStatus> LogStatuses { get; set; }

    public virtual DbSet<LogType> LogTypes { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<SellSideNotificationChange> SellSideNotificationChanges { get; set; }

    public virtual DbSet<SellSideNotificationDispute> SellSideNotificationDisputes { get; set; }

    public virtual DbSet<TsaSchedule> TsaSchedules { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<VActivityReport> VActivityReports { get; set; }

    public virtual DbSet<VAddLog> VAddLogs { get; set; }

    public virtual DbSet<VChangeLog> VChangeLogs { get; set; }

    public virtual DbSet<VDisputeLog> VDisputeLogs { get; set; }

    public virtual DbSet<VInputStreamSummary> VInputStreamSummaries { get; set; }

    public virtual DbSet<VInvEstPayDisp> VInvEstPayDisps { get; set; }

    public virtual DbSet<VInvPay> VInvPays { get; set; }

    public virtual DbSet<VLogTypeStatus> VLogTypeStatuses { get; set; }

    public virtual DbSet<VMonthlyEstimate> VMonthlyEstimates { get; set; }

    public virtual DbSet<VMonthlyEstimatesActual> VMonthlyEstimatesActuals { get; set; }

    public virtual DbSet<VMonthlyEstimatesActuals20210407> VMonthlyEstimatesActuals20210407s { get; set; }

    public virtual DbSet<VMonthlyInvEstPayDisp> VMonthlyInvEstPayDisps { get; set; }

    public virtual DbSet<VPaymentApprovalReport> VPaymentApprovalReports { get; set; }

    public virtual DbSet<VTsaStatus> VTsaStatuses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddLog>(entity =>
        {
            entity
                .ToTable("add_log")
                .ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("add_log_history", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.HasIndex(e => e.AddTypeId, "IX_add_log_add_type_id");

            entity.HasIndex(e => e.ChangeLogStatusId, "IX_add_log_change_log_status_id");

            entity.HasIndex(e => e.ChangeLogTypeId, "IX_add_log_change_log_type_id");

            entity.HasIndex(e => e.CreatedUserId, "IX_add_log_created_user_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_add_log_last_modified_user_id");

            entity.HasIndex(e => e.RequestedByUserId, "IX_add_log_requested_by_user_id");

            entity.HasIndex(e => e.SubmittedByUserId, "IX_add_log_submitted_by_user_id");

            entity.HasIndex(e => e.TsaId, "add_log__idxv1");

            entity.HasIndex(e => e.TsaSubId, "add_log__idxv2");

            entity.Property(e => e.AddLogId).HasColumnName("add_log_id");
            entity.Property(e => e.AddId)
                .HasMaxLength(32)
                .HasColumnName("add_id");
            entity.Property(e => e.AddTypeId).HasColumnName("add_type_id");
            entity.Property(e => e.ChangeDate).HasColumnName("change_date");
            entity.Property(e => e.ChangeLogStatusId).HasColumnName("change_log_status_id");
            entity.Property(e => e.ChangeLogTypeId).HasColumnName("change_log_type_id");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaSubIds)
                .HasMaxLength(128)
                .HasColumnName("tsa_sub_ids");

            entity.HasOne(d => d.AddType).WithMany(p => p.AddLogs)
                .HasForeignKey(d => d.AddTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("add_log_add_type_fk");

            entity.HasOne(d => d.ChangeLogStatus).WithMany(p => p.AddLogs)
                .HasForeignKey(d => d.ChangeLogStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("add_log_log_status_fk");

            entity.HasOne(d => d.ChangeLogType).WithMany(p => p.AddLogs)
                .HasForeignKey(d => d.ChangeLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("add_log_log_type_fk");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.AddLogCreatedUsers)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_add_log_Users_created_user_id");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.AddLogLastModifiedUsers)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_add_log_Users_last_modified_user_id");

            entity.HasOne(d => d.RequestedByUser).WithMany(p => p.AddLogRequestedByUsers)
                .HasForeignKey(d => d.RequestedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_add_log_Users_requested_by_user_id");

            entity.HasOne(d => d.SubmittedByUser).WithMany(p => p.AddLogSubmittedByUsers)
                .HasForeignKey(d => d.SubmittedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_add_log_Users_submitted_by_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.AddLogs)
                .HasForeignKey(d => d.TsaSubId)
                .HasConstraintName("add_log_tsa_schedule_fk");
        });

        modelBuilder.Entity<AddLogFile>(entity =>
        {
            entity.ToTable("add_log_file");

            entity.HasIndex(e => e.AddLogId, "IX_add_log_file_add_log_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_add_log_file_file_repository_id");

            entity.Property(e => e.AddLogFileId).HasColumnName("add_log_file_id");
            entity.Property(e => e.AddLogId).HasColumnName("add_log_id");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");

            entity.HasOne(d => d.AddLog).WithMany(p => p.AddLogFiles)
                .HasForeignKey(d => d.AddLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("add_log_file_add_log_fk");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.AddLogFiles)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("add_log_file_file_repository_fk");
        });

        modelBuilder.Entity<AddType>(entity =>
        {
            entity.ToTable("add_type");

            entity.Property(e => e.AddTypeId).HasColumnName("add_type_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ChangeLog>(entity =>
        {
            entity
                .ToTable("change_log")
                .ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("change_log_history", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.HasIndex(e => e.ChangeLogStatusId, "IX_change_log_change_log_status_id");

            entity.HasIndex(e => e.ChangeLogTypeId, "IX_change_log_change_log_type_id");

            entity.HasIndex(e => e.CreatedUserId, "IX_change_log_created_user_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_change_log_last_modified_user_id");

            entity.HasIndex(e => e.RequestedByUserId, "IX_change_log_requested_by_user_id");

            entity.HasIndex(e => e.SubmittedByUserId, "IX_change_log_submitted_by_user_id");

            entity.HasIndex(e => e.TsaId, "change_log__idxv1");

            entity.HasIndex(e => e.TsaSubId, "change_log__idxv2");

            entity.Property(e => e.ChangeLogId).HasColumnName("change_log_id");
            entity.Property(e => e.ChangeDate).HasColumnName("change_date");
            entity.Property(e => e.ChangeId)
                .HasMaxLength(32)
                .HasColumnName("change_id");
            entity.Property(e => e.ChangeLogStatusId).HasColumnName("change_log_status_id");
            entity.Property(e => e.ChangeLogTypeId).HasColumnName("change_log_type_id");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");

            entity.HasOne(d => d.ChangeLogStatus).WithMany(p => p.ChangeLogs)
                .HasForeignKey(d => d.ChangeLogStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("log_change_log_status_fk");

            entity.HasOne(d => d.ChangeLogType).WithMany(p => p.ChangeLogs)
                .HasForeignKey(d => d.ChangeLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("log_change_log_type_fk");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ChangeLogCreatedUsers)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_log_Users_created_user_id");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ChangeLogLastModifiedUsers)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_log_Users_last_modified_user_id");

            entity.HasOne(d => d.RequestedByUser).WithMany(p => p.ChangeLogRequestedByUsers)
                .HasForeignKey(d => d.RequestedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_log_Users_requested_by_user_id");

            entity.HasOne(d => d.SubmittedByUser).WithMany(p => p.ChangeLogSubmittedByUsers)
                .HasForeignKey(d => d.SubmittedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_log_Users_submitted_by_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.ChangeLogs)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ChangeLogFile>(entity =>
        {
            entity.ToTable("change_log_file");

            entity.HasIndex(e => e.ChangeLogId, "IX_change_log_file_change_log_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_change_log_file_file_repository_id");

            entity.Property(e => e.ChangeLogFileId).HasColumnName("change_log_file_id");
            entity.Property(e => e.ChangeLogId).HasColumnName("change_log_id");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");

            entity.HasOne(d => d.ChangeLog).WithMany(p => p.ChangeLogFiles)
                .HasForeignKey(d => d.ChangeLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("change_log_file_change_log_fk");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.ChangeLogFiles)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("change_log_file_file_repository_fk");
        });

        modelBuilder.Entity<ChangeResolutionLog>(entity =>
        {
            entity.ToTable("change_resolution_log");

            entity.HasIndex(e => e.ChangeLogTypeId, "IX_change_resolution_log_change_log_type_id");

            entity.HasIndex(e => e.CreatedUserId, "IX_change_resolution_log_created_user_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_change_resolution_log_file_repository_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_change_resolution_log_last_modified_user_id");

            entity.HasIndex(e => e.TsaId, "change_resolution_log__idxv1");

            entity.HasIndex(e => e.TsaSubId, "change_resolution_log__idxv2");

            entity.Property(e => e.ChangeResolutionLogId).HasColumnName("change_resolution_log_id");
            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.ActiveOptionDurationExercised).HasColumnName("active_option_duration_exercised");
            entity.Property(e => e.AdditionalPricingComments)
                .HasMaxLength(1024)
                .HasColumnName("additional_pricing_comments");
            entity.Property(e => e.Assumptions)
                .HasColumnType("ntext")
                .HasColumnName("assumptions");
            entity.Property(e => e.ChangeId)
                .HasMaxLength(32)
                .HasColumnName("change_id");
            entity.Property(e => e.ChangeLogTypeId).HasColumnName("change_log_type_id");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.EffectiveDate).HasColumnName("effective_date");
            entity.Property(e => e.EstimatedDurationText)
                .HasMaxLength(64)
                .HasColumnName("estimated_duration_text");
            entity.Property(e => e.ExceptionsReOwnershipIp)
                .HasMaxLength(256)
                .HasColumnName("exceptions_re_ownership_ip");
            entity.Property(e => e.ExceptionsTo30DayPayment)
                .HasMaxLength(256)
                .HasColumnName("exceptions_to_30_day_payment");
            entity.Property(e => e.ExceptionsToMonthlyInvoice)
                .HasMaxLength(512)
                .HasColumnName("exceptions_to_monthly_invoice");
            entity.Property(e => e.ExitCostAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("exit_cost_amount");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.KnownDependencies)
                .HasMaxLength(1024)
                .HasColumnName("known_dependencies");
            entity.Property(e => e.KnownTsaExitCosts)
                .HasMaxLength(512)
                .HasColumnName("known_tsa_exit_costs");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.MaxOptionDuration).HasColumnName("max_option_duration");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.NoticeOfTermNum).HasColumnName("notice_of_term_num");
            entity.Property(e => e.NoticeOfTerminationText)
                .HasMaxLength(128)
                .HasColumnName("notice_of_termination_text");
            entity.Property(e => e.NumOfUnits)
                .HasMaxLength(128)
                .HasColumnName("num_of_units");
            entity.Property(e => e.OptionExercisedFlag)
                .HasMaxLength(24)
                .HasColumnName("option_exercised_flag");
            entity.Property(e => e.OptionFlag)
                .HasMaxLength(8)
                .HasColumnName("option_flag");
            entity.Property(e => e.PricePerUnit)
                .HasMaxLength(128)
                .HasColumnName("price_per_unit");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ProviderOwner)
                .HasMaxLength(640)
                .HasColumnName("provider_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceExceptions)
                .HasMaxLength(1024)
                .HasColumnName("service_exceptions");
            entity.Property(e => e.ServiceLocation)
                .HasMaxLength(512)
                .HasColumnName("service_location");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TaxDetermination)
                .HasMaxLength(256)
                .HasColumnName("tax_determination");
            entity.Property(e => e.TsaExitApproach)
                .HasMaxLength(512)
                .HasColumnName("tsa_exit_approach");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");

            entity.HasOne(d => d.ChangeLogType).WithMany(p => p.ChangeResolutionLogs)
                .HasForeignKey(d => d.ChangeLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("change_resolution_log_change_request_type_fk");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.ChangeResolutionLogCreatedUsers)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_resolution_log_Users_created_user_id");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.ChangeResolutionLogs)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tsa_schedulev1_file_repository_fk");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.ChangeResolutionLogLastModifiedUsers)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_change_resolution_log_Users_last_modified_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.ChangeResolutionLogs)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("change_resolution_log_tsa_schedule_fk");
        });

        modelBuilder.Entity<DisputeDiscrepancy>(entity =>
        {
            entity.ToTable("dispute_discrepancy");

            entity.Property(e => e.DisputeDiscrepancyId).HasColumnName("dispute_discrepancy_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
        });

        modelBuilder.Entity<DisputeLog>(entity =>
        {
            entity
                .ToTable("dispute_log")
                .ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("dispute_log_history", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.HasIndex(e => e.CreatedUserId, "IX_dispute_log_created_user_id");

            entity.HasIndex(e => e.DisputeDiscrepancyId, "IX_dispute_log_dispute_discrepancy_id");

            entity.HasIndex(e => e.DisputeTypeId, "IX_dispute_log_dispute_type_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_dispute_log_last_modified_user_id");

            entity.HasIndex(e => e.RequestedByUserId, "IX_dispute_log_requested_by_user_id");

            entity.HasIndex(e => e.SubmittedByUserId, "IX_dispute_log_submitted_by_user_id");

            entity.HasIndex(e => e.TsaId, "dispute_log__idxv1");

            entity.HasIndex(e => e.TsaSubId, "dispute_log__idxv2");

            entity.Property(e => e.DisputeLogId).HasColumnName("dispute_log_id");
            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.DisputeDiscrepancyId).HasColumnName("dispute_discrepancy_id");
            entity.Property(e => e.DisputeId)
                .HasMaxLength(32)
                .HasColumnName("dispute_id");
            entity.Property(e => e.DisputeTypeId).HasColumnName("dispute_type_id");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.SubmissionDate).HasColumnName("submission_date");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.DisputeLogCreatedUsers)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dispute_log_Users_created_user_id");

            entity.HasOne(d => d.DisputeDiscrepancy).WithMany(p => p.DisputeLogs)
                .HasForeignKey(d => d.DisputeDiscrepancyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dispute_log_dispute_discrepancy_fk");

            entity.HasOne(d => d.DisputeType).WithMany(p => p.DisputeLogs)
                .HasForeignKey(d => d.DisputeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dispute_log_dispute_type_fk");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.DisputeLogLastModifiedUsers)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dispute_log_Users_last_modified_user_id");

            entity.HasOne(d => d.RequestedByUser).WithMany(p => p.DisputeLogRequestedByUsers)
                .HasForeignKey(d => d.RequestedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dispute_log_Users_requested_by_user_id");

            entity.HasOne(d => d.SubmittedByUser).WithMany(p => p.DisputeLogSubmittedByUsers)
                .HasForeignKey(d => d.SubmittedByUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dispute_log_Users_submitted_by_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.DisputeLogs)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dispute_log_tsa_schedule_fk");
        });

        modelBuilder.Entity<DisputeLogFile>(entity =>
        {
            entity.ToTable("dispute_log_file");

            entity.HasIndex(e => e.DisputeLogId, "IX_dispute_log_file_dispute_log_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_dispute_log_file_file_repository_id");

            entity.Property(e => e.DisputeLogFileId).HasColumnName("dispute_log_file_id");
            entity.Property(e => e.DisputeLogId).HasColumnName("dispute_log_id");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");

            entity.HasOne(d => d.DisputeLog).WithMany(p => p.DisputeLogFiles)
                .HasForeignKey(d => d.DisputeLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dispute_request_file_dispute_log_fk");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.DisputeLogFiles)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("dispute_request_file_file_repository_fk");
        });

        modelBuilder.Entity<DisputeType>(entity =>
        {
            entity.ToTable("dispute_type");

            entity.Property(e => e.DisputeTypeId).HasColumnName("dispute_type_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ExcelFailure>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.CreatedUserId, "IX_ExcelFailures_CreatedUserId");

            entity.Property(e => e.CellData).HasColumnType("ntext");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Errors)
                .IsRequired()
                .HasColumnType("ntext");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.FileType)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.StackTrace).HasColumnType("ntext");

            entity.HasOne(d => d.CreatedUser).WithMany()
                .HasForeignKey(d => d.CreatedUserId)
                .HasConstraintName("FK_ExcelFailures_Users_CreatedUserId");
        });

        modelBuilder.Entity<Exception>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("exceptions");

            entity.Property(e => e.EndOfMonth).HasColumnName("end_of_month");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
        });

        modelBuilder.Entity<FileRepository>(entity =>
        {
            entity.ToTable("file_repository");

            entity.HasIndex(e => e.CreatedUserId, "IX_file_repository_created_user_id");

            entity.HasIndex(e => e.FileTypeId, "IX_file_repository_file_type_id");

            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.FileName)
                .HasMaxLength(256)
                .HasColumnName("file_name");
            entity.Property(e => e.FileStream)
                .IsRequired()
                .HasColumnName("file_stream");
            entity.Property(e => e.FileTypeId).HasColumnName("file_type_id");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.FileRepositories)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_file_repository_Users_created_user_id");

            entity.HasOne(d => d.FileType).WithMany(p => p.FileRepositories)
                .HasForeignKey(d => d.FileTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("file_repository_file_type_fk");
        });

        modelBuilder.Entity<FileType>(entity =>
        {
            entity.ToTable("file_type");

            entity.Property(e => e.FileTypeId).HasColumnName("file_type_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.ToTable("invoice");

            entity.HasIndex(e => e.CreatedUserId, "IX_invoice_created_user_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_invoice_file_repository_id");

            entity.HasIndex(e => e.TsaId, "invoice__idxv1");

            entity.HasIndex(e => e.TsaSubId, "invoice__idxv2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnkuraInvoice)
                .HasMaxLength(24)
                .HasColumnName("ankura_invoice");
            entity.Property(e => e.Cost)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cost");
            entity.Property(e => e.CostUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("cost_usd");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.InvoiceDate).HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceDueDate).HasColumnName("invoice_due_date");
            entity.Property(e => e.InvoiceFrequency)
                .HasMaxLength(128)
                .HasColumnName("invoice_frequency");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.InvoicePeriodEndDate).HasColumnName("invoice_period_end_date");
            entity.Property(e => e.InvoicePeriodStartDate).HasColumnName("invoice_period_start_date");
            entity.Property(e => e.Markup)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("markup");
            entity.Property(e => e.MarkupUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("markup_usd");
            entity.Property(e => e.NumberOfUnits)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("number_of_units");
            entity.Property(e => e.ReferenceInvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("reference_invoice_number");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.UnitOfMeasure)
                .HasMaxLength(128)
                .HasColumnName("unit_of_measure");
            entity.Property(e => e.UsdExchangeRate)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("usd_exchange_rate");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_invoice_Users_created_user_id");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("invoice_file_repository_fkv2");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("invoice_tsa_schedule_fk");
        });

        modelBuilder.Entity<LogStatus>(entity =>
        {
            entity.ToTable("log_status");

            entity.HasIndex(e => e.LogTypeId, "IX_log_status_log_type_id");

            entity.Property(e => e.LogStatusId).HasColumnName("log_status_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LogTypeId).HasColumnName("log_type_id");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");

            entity.HasOne(d => d.LogType).WithMany(p => p.LogStatuses)
                .HasForeignKey(d => d.LogTypeId)
                .HasConstraintName("log_status_log_type_fk");
        });

        modelBuilder.Entity<LogType>(entity =>
        {
            entity.ToTable("log_type");

            entity.Property(e => e.LogTypeId).HasColumnName("log_type_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.ToTable("payment");

            entity.HasIndex(e => e.CreatedUserId, "IX_payment_created_user_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_payment_file_repository_id");

            entity.HasIndex(e => e.TsaId, "payment__idxv1");

            entity.HasIndex(e => e.TsaSubId, "payment__idxv2");

            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.AnkuraInvoice)
                .HasMaxLength(24)
                .HasColumnName("ankura_invoice");
            entity.Property(e => e.BankAccountFrom)
                .HasMaxLength(256)
                .HasColumnName("bank_account_from");
            entity.Property(e => e.BankAccountTo)
                .HasMaxLength(256)
                .HasColumnName("bank_account_To");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.ExchangeRate)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("exchange_rate");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("payment_amount");
            entity.Property(e => e.PaymentDate).HasColumnName("payment_date");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(128)
                .HasColumnName("payment_type");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(256)
                .HasColumnName("transaction_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.UsdConversion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("usd_conversion");

            entity.HasOne(d => d.CreatedUser).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CreatedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_payment_Users_created_user_id");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.Payments)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("payment_file_repository_fkv2");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.Payments)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("payment_tsa_schedule_fk");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Roles");

            entity.ToTable("role");

            entity.HasIndex(e => e.Name, "IX_Roles_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Disabled).HasColumnName("disabled");
            entity.Property(e => e.DisabledAt).HasColumnName("disabled_at");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SellSideNotificationChange>(entity =>
        {
            entity.HasKey(e => e.NotificationChangeId).HasName("sell_side_notification_change_pk");

            entity.ToTable("sell_side_notification_change");

            entity.HasIndex(e => e.FileRepositoryId, "IX_sell_side_notification_change_file_repository_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_sell_side_notification_change_last_modified_user_id");

            entity.HasIndex(e => e.TsaId, "sell_side_notification_change__idxv1");

            entity.HasIndex(e => e.TsaSubId, "sell_side_notification_change__idxv2");

            entity.Property(e => e.NotificationChangeId).HasColumnName("notification_change_id");
            entity.Property(e => e.ActionItem)
                .HasMaxLength(512)
                .HasColumnName("action_item");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(128)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(1024)
                .HasColumnName("service_name");
            entity.Property(e => e.Status)
                .HasMaxLength(64)
                .HasColumnName("status");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.SellSideNotificationChanges)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sell_side_notification_change_file_repository_fk");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.SellSideNotificationChanges)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sell_side_notification_change_Users_last_modified_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.SellSideNotificationChanges)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sell_side_notification_change_tsa_schedule_fk");
        });

        modelBuilder.Entity<SellSideNotificationDispute>(entity =>
        {
            entity.HasKey(e => e.NotificationDisputeId).HasName("sell_side_notification_dispute_pk");

            entity.ToTable("sell_side_notification_dispute");

            entity.HasIndex(e => e.FileRepositoryId, "IX_sell_side_notification_dispute_file_repository_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_sell_side_notification_dispute_last_modifed_user_id");

            entity.HasIndex(e => e.TsaId, "sell_side_notification_dispute__idxv1");

            entity.HasIndex(e => e.TsaSubId, "sell_side_notification_dispute__idxv2");

            entity.Property(e => e.NotificationDisputeId).HasColumnName("notification_dispute_id");
            entity.Property(e => e.ActionItem)
                .HasMaxLength(512)
                .HasColumnName("action_item");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("money")
                .HasColumnName("invoice_amount");
            entity.Property(e => e.InvoiceCurrency)
                .HasMaxLength(3)
                .HasColumnName("invoice_currency");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.InvoicePeriodEndDate)
                .HasColumnType("datetime")
                .HasColumnName("invoice_period_end_date");
            entity.Property(e => e.InvoicePeriodStartDate)
                .HasColumnType("datetime")
                .HasColumnName("invoice_period_start_date");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(128)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(1024)
                .HasColumnName("service_name");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.Type)
                .HasMaxLength(64)
                .HasColumnName("type");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.SellSideNotificationDisputes)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sell_side_notification_dispute_file_repository_fk");

            entity.HasOne(d => d.LastModifiedUser).WithMany(p => p.SellSideNotificationDisputes)
                .HasForeignKey(d => d.LastModifiedUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sell_side_notification_dispute_Users_last_modifed_user_id");

            entity.HasOne(d => d.TsaSub).WithMany(p => p.SellSideNotificationDisputes)
                .HasForeignKey(d => d.TsaSubId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sell_side_notification_dispute_tsa_schedule_fk");
        });

        modelBuilder.Entity<TsaSchedule>(entity =>
        {
            entity.HasKey(e => e.TsaSubId).HasName("tsa_pk");

            entity
                .ToTable("tsa_schedule")
                .ToTable(tb => tb.IsTemporal(ttb =>
                    {
                        ttb.UseHistoryTable("tsa_schedule_history", "dbo");
                        ttb
                            .HasPeriodStart("ValidFrom")
                            .HasColumnName("ValidFrom");
                        ttb
                            .HasPeriodEnd("ValidTo")
                            .HasColumnName("ValidTo");
                    }));

            entity.HasIndex(e => e.CreatedUserId, "IX_tsa_schedule_created_user_id");

            entity.HasIndex(e => e.FileRepositoryId, "IX_tsa_schedule_file_repository_id");

            entity.HasIndex(e => e.LastModifiedUserId, "IX_tsa_schedule_last_modified_user_id");

            entity.HasIndex(e => e.TsaId, "tsa_schedule__idxv1");

            entity.Property(e => e.TsaSubId)
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.ActiveOptionDurationExercised).HasColumnName("active_option_duration_exercised");
            entity.Property(e => e.AdditionalPricingComments)
                .HasMaxLength(1024)
                .HasColumnName("additional_pricing_comments");
            entity.Property(e => e.Assumptions)
                .HasColumnType("ntext")
                .HasColumnName("assumptions");
            entity.Property(e => e.Aud)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AUD");
            entity.Property(e => e.Bgn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BGN");
            entity.Property(e => e.Brl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BRL");
            entity.Property(e => e.Cad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAD");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(24)
                .HasColumnName("change_log_type");
            entity.Property(e => e.Cny)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CNY");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.Crc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CRC");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.Czk)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CZK");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.Dkk)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DKK");
            entity.Property(e => e.EstimatedDuration).HasColumnName("estimated_duration");
            entity.Property(e => e.EstimatedDurationText)
                .HasMaxLength(64)
                .HasColumnName("estimated_duration_text");
            entity.Property(e => e.Eur)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EUR");
            entity.Property(e => e.ExceptionsReOwnershipIp)
                .HasMaxLength(256)
                .HasColumnName("exceptions_re_ownership_ip");
            entity.Property(e => e.ExceptionsTo30DayPayment)
                .HasMaxLength(256)
                .HasColumnName("exceptions_to_30_day_payment");
            entity.Property(e => e.ExceptionsToMonthlyInvoice)
                .HasMaxLength(512)
                .HasColumnName("exceptions_to_monthly_invoice");
            entity.Property(e => e.ExitCostAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("exit_cost_amount");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.Gbp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GBP");
            entity.Property(e => e.Huf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUF");
            entity.Property(e => e.Inr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INR");
            entity.Property(e => e.KnownDependencies)
                .HasMaxLength(1024)
                .HasColumnName("known_dependencies");
            entity.Property(e => e.KnownTsaExitCosts)
                .HasMaxLength(512)
                .HasColumnName("known_tsa_exit_costs");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.MaxOptionDuration).HasColumnName("max_option_duration");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.MonthlyPricingText)
                .HasMaxLength(32)
                .HasColumnName("monthly_pricing_text");
            entity.Property(e => e.Mxn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MXN");
            entity.Property(e => e.NoticeOfTermNum).HasColumnName("notice_of_term_num");
            entity.Property(e => e.NoticeOfTerminationText)
                .HasMaxLength(128)
                .HasColumnName("notice_of_termination_text");
            entity.Property(e => e.NumOfUnits)
                .HasMaxLength(128)
                .HasColumnName("num_of_units");
            entity.Property(e => e.OptionExercisedFlag)
                .HasMaxLength(24)
                .HasColumnName("option_exercised_flag");
            entity.Property(e => e.OptionFlag)
                .HasMaxLength(8)
                .HasColumnName("option_flag");
            entity.Property(e => e.OriginalEndDate).HasColumnName("original_end_date");
            entity.Property(e => e.Php)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHP");
            entity.Property(e => e.Pln)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLN");
            entity.Property(e => e.PricePerUnit)
                .HasMaxLength(128)
                .HasColumnName("price_per_unit");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ProviderOwner)
                .HasMaxLength(640)
                .HasColumnName("provider_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceExceptions)
                .HasMaxLength(1024)
                .HasColumnName("service_exceptions");
            entity.Property(e => e.ServiceLocation)
                .HasMaxLength(512)
                .HasColumnName("service_location");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.Sgd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGD");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TaxDetermination)
                .HasMaxLength(256)
                .HasColumnName("tax_determination");
            entity.Property(e => e.TsaExitApproach)
                .HasMaxLength(512)
                .HasColumnName("tsa_exit_approach");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
            entity.Property(e => e.Usd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("USD");

            entity.HasOne(d => d.FileRepository).WithMany(p => p.TsaSchedules)
                .HasForeignKey(d => d.FileRepositoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tsa_schedule_file_repository_fk");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Users");

            entity.ToTable("user");

            entity.HasIndex(e => e.UserName, "IX_Users_user_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate).HasColumnName("created_date");
            entity.Property(e => e.Disabled).HasColumnName("disabled");
            entity.Property(e => e.DisabledAt).HasColumnName("disabled_at");
            entity.Property(e => e.Email)
                .HasMaxLength(512)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(256)
                .HasColumnName("first_name");
            entity.Property(e => e.LastModifiedDate).HasColumnName("last_modified_date");
            entity.Property(e => e.LastName)
                .HasMaxLength(256)
                .HasColumnName("last_name");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(256)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserRoles");

            entity.ToTable("user_role");

            entity.HasIndex(e => e.RoleId, "IX_UserRoles_RoleId");

            entity.HasIndex(e => new { e.UserId, e.RoleId }, "IX_UserRoles_UserId_RoleId").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_UserRoles_Roles_RoleId");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserRoles_Users_UserId");
        });

        modelBuilder.Entity<VActivityReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_activity_report");

            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.EffectiveDate).HasColumnName("effective_date");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.Id)
                .HasMaxLength(32)
                .HasColumnName("id");
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.InvoicePeriodEndDate).HasColumnName("invoice_period_end_date");
            entity.Property(e => e.LogStatus)
                .HasMaxLength(128)
                .HasColumnName("log_status");
            entity.Property(e => e.LogType)
                .HasMaxLength(128)
                .HasColumnName("log_type");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(513)
                .HasColumnName("submitted_by");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
        });

        modelBuilder.Entity<VAddLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_add_log");

            entity.Property(e => e.AddId)
                .HasMaxLength(32)
                .HasColumnName("add_id");
            entity.Property(e => e.AddLogId).HasColumnName("add_log_id");
            entity.Property(e => e.AddTypeId).HasColumnName("add_type_id");
            entity.Property(e => e.ChangeDate).HasColumnName("change_date");
            entity.Property(e => e.ChangeLogStatus)
                .HasMaxLength(128)
                .HasColumnName("change_log_status");
            entity.Property(e => e.ChangeLogStatusId).HasColumnName("change_log_status_id");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(128)
                .HasColumnName("change_log_type");
            entity.Property(e => e.ChangeLogTypeId).HasColumnName("change_log_type_id");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaSubIds)
                .HasMaxLength(128)
                .HasColumnName("tsa_sub_ids");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
        });

        modelBuilder.Entity<VChangeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_change_log");

            entity.Property(e => e.ChangeDate).HasColumnName("change_date");
            entity.Property(e => e.ChangeId)
                .HasMaxLength(32)
                .HasColumnName("change_id");
            entity.Property(e => e.ChangeLogId).HasColumnName("change_log_id");
            entity.Property(e => e.ChangeLogStatus)
                .HasMaxLength(128)
                .HasColumnName("change_log_status");
            entity.Property(e => e.ChangeLogStatusId).HasColumnName("change_log_status_id");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(128)
                .HasColumnName("change_log_type");
            entity.Property(e => e.ChangeLogTypeId).HasColumnName("change_log_type_id");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
        });

        modelBuilder.Entity<VDisputeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_dispute_log");

            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.DisputeDiscrepancy)
                .HasMaxLength(128)
                .HasColumnName("dispute_discrepancy");
            entity.Property(e => e.DisputeDiscrepancyId).HasColumnName("dispute_discrepancy_id");
            entity.Property(e => e.DisputeId)
                .HasMaxLength(32)
                .HasColumnName("dispute_id");
            entity.Property(e => e.DisputeLogId).HasColumnName("dispute_log_id");
            entity.Property(e => e.DisputeType)
                .HasMaxLength(128)
                .HasColumnName("dispute_type");
            entity.Property(e => e.DisputeTypeId).HasColumnName("dispute_type_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.MonthlyCostForecastInclActuals)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("monthly_cost_forecast_incl_actuals");
            entity.Property(e => e.MonthlyCostForecastProratedInclActuals).HasColumnName("monthly_cost_forecast_prorated_incl_actuals");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.RequestedByUserId).HasColumnName("requested_by_user_id");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.SubmissionDate).HasColumnName("submission_date");
            entity.Property(e => e.SubmittedByUserId).HasColumnName("submitted_by_user_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
        });

        modelBuilder.Entity<VInputStreamSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_input_stream_summary");

            entity.Property(e => e.FileName).HasMaxLength(256);
            entity.Property(e => e.FileTypeName)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UploadedBy).HasMaxLength(512);
            entity.Property(e => e.UploadedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VInvEstPayDisp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_inv_est_pay_disp");

            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.DisputeCategory)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Dispute_Category");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.InvoicePeriodEndDate).HasColumnName("invoice_period_end_date");
            entity.Property(e => e.InvoicePeriodStartDate).HasColumnName("invoice_period_start_date");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyCostForecastProratedInvoicePeriod).HasColumnName("monthly_cost_forecast_prorated_invoice_period");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("payment_amount");
            entity.Property(e => e.PaymentDate).HasColumnName("payment_date");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(128)
                .HasColumnName("payment_type");
            entity.Property(e => e.PaymentUsdConversion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("payment_usd_conversion");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(256)
                .HasColumnName("transaction_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
        });

        modelBuilder.Entity<VInvPay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_inv_pay");

            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.AnkuraInvoice)
                .HasMaxLength(24)
                .HasColumnName("ankura_invoice");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.DisputeCategory)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Dispute_Category");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.InvoiceAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.InvoiceDate).HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("invoice_number");
            entity.Property(e => e.InvoicePeriodEndDate).HasColumnName("invoice_period_end_date");
            entity.Property(e => e.InvoicePeriodStartDate).HasColumnName("invoice_period_start_date");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("payment_amount");
            entity.Property(e => e.PaymentDate).HasColumnName("payment_date");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(128)
                .HasColumnName("payment_type");
            entity.Property(e => e.PaymentUsdConversion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("payment_usd_conversion");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(256)
                .HasColumnName("transaction_id");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
        });

        modelBuilder.Entity<VLogTypeStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_log_type_status");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Id)
                .HasMaxLength(1)
                .HasColumnName("id");
            entity.Property(e => e.LogStatusId).HasColumnName("log_status_id");
            entity.Property(e => e.LogStatusName)
                .HasMaxLength(128)
                .HasColumnName("log_status_name");
            entity.Property(e => e.LogTypeId).HasColumnName("log_type_id");
            entity.Property(e => e.LogTypeName)
                .HasMaxLength(128)
                .HasColumnName("log_type_name");
        });

        modelBuilder.Entity<VMonthlyEstimate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_monthly_estimates");

            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.EndOfMonth).HasColumnName("END_OF_MONTH");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.OriginalEndDate).HasColumnName("original_end_date");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<VMonthlyEstimatesActual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_monthly_estimates_actuals");

            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.CancelledFlag)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Cancelled_Flag");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(24)
                .HasColumnName("change_log_type");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.CreditMemoAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("credit_memo_amount_usd");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.DisputeCategory)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Dispute_Category");
            entity.Property(e => e.EndOfMonth).HasColumnName("END_OF_MONTH");
            entity.Property(e => e.ExceptionForecast).HasColumnName("exception_forecast");
            entity.Property(e => e.ExceptionPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("exception_pricing");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastInclActuals)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("monthly_cost_forecast_incl_actuals");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyCostForecastProratedInclActuals).HasColumnName("monthly_cost_forecast_prorated_incl_actuals");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.NumCredits).HasColumnName("num_credits");
            entity.Property(e => e.NumPosInv).HasColumnName("num_pos_inv");
            entity.Property(e => e.OrigInvoiceAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("orig_invoice_amount_usd");
            entity.Property(e => e.PaymentUsdConversion)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("payment_usd_conversion");
            entity.Property(e => e.PosInvAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("pos_inv_amount_usd");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<VMonthlyEstimatesActuals20210407>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("v_monthly_estimates_actuals_2021_0407", "archive");

            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.AgreedCost)
                .HasColumnType("money")
                .HasColumnName("agreed_cost");
            entity.Property(e => e.CancelledFlag)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Cancelled_Flag");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(24)
                .HasColumnName("change_log_type");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.CreditMemoAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("credit_memo_amount_usd");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.DisputeCategory)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Dispute_Category");
            entity.Property(e => e.EndOfMonth).HasColumnName("END_OF_MONTH");
            entity.Property(e => e.ExceptionForecast).HasColumnName("exception_forecast");
            entity.Property(e => e.ExceptionPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("exception_pricing");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.InvoiceAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("invoice_amount_usd");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastInclActuals)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("monthly_cost_forecast_incl_actuals");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyCostForecastProratedInclActuals).HasColumnName("monthly_cost_forecast_prorated_incl_actuals");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.NumCredits).HasColumnName("num_credits");
            entity.Property(e => e.NumPosInv).HasColumnName("num_pos_inv");
            entity.Property(e => e.OrigInvoiceAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("orig_invoice_amount_usd");
            entity.Property(e => e.PaymentUsdConversion)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("payment_usd_conversion");
            entity.Property(e => e.PosInvAmountUsd)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("pos_inv_amount_usd");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<VMonthlyInvEstPayDisp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_monthly_inv_est_pay_disp");

            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(22, 4)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyCostForecastProrated).HasColumnName("monthly_cost_forecast_prorated");
            entity.Property(e => e.MonthlyInvoiceAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("monthly_invoice_amount");
            entity.Property(e => e.MonthlyInvoiceUsdConversion)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("monthly_invoice_usd_conversion");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.PaymentAmount)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("payment_amount");
            entity.Property(e => e.PaymentUsdConversion)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("payment_usd_conversion");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
        });

        modelBuilder.Entity<VPaymentApprovalReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_payment_approval_report");

            entity.Property(e => e.ApprovedProposedReleaseWoTax)
                .HasColumnType("numeric(19, 2)")
                .HasColumnName("approved_proposed_release_wo_tax");
            entity.Property(e => e.CreditMemoAmountUsd)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("credit_memo_amount_usd");
            entity.Property(e => e.CreditMemoNumber)
                .HasMaxLength(24)
                .HasColumnName("credit_memo_number");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.DifferenceWB)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("difference_w_b");
            entity.Property(e => e.DisputedAmountUsd)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("disputed_amount_usd");
            entity.Property(e => e.OriginalInvoiceAmountUsd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("original_invoice_amount_usd");
            entity.Property(e => e.OriginalInvoiceNumber)
                .HasMaxLength(24)
                .HasColumnName("original_invoice_number");
            entity.Property(e => e.ServicePeriod).HasColumnName("service_period");
            entity.Property(e => e.TotalInvoicedAmountForServicePeriod)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("total_invoiced_amount_for_service_period");
            entity.Property(e => e.TsaBaseline)
                .HasColumnType("numeric(29, 8)")
                .HasColumnName("tsa_baseline");
            entity.Property(e => e.TsaDescription)
                .HasMaxLength(512)
                .HasColumnName("tsa_description");
            entity.Property(e => e.TsaId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
        });

        modelBuilder.Entity<VTsaStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_TSA_status");

            entity.Property(e => e.ActiveEndDate).HasColumnName("active_end_date");
            entity.Property(e => e.ActiveOptionDurationExercised).HasColumnName("active_option_duration_exercised");
            entity.Property(e => e.AdditionalPricingComments)
                .HasMaxLength(1024)
                .HasColumnName("additional_pricing_comments");
            entity.Property(e => e.Assumptions)
                .HasColumnType("ntext")
                .HasColumnName("assumptions");
            entity.Property(e => e.Aud)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AUD");
            entity.Property(e => e.Bgn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BGN");
            entity.Property(e => e.Brl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BRL");
            entity.Property(e => e.Cad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAD");
            entity.Property(e => e.CancelledFlag)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Cancelled_Flag");
            entity.Property(e => e.ChangeLogType)
                .HasMaxLength(24)
                .HasColumnName("change_log_type");
            entity.Property(e => e.Cny)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CNY");
            entity.Property(e => e.CostType)
                .HasMaxLength(128)
                .HasColumnName("cost_type");
            entity.Property(e => e.Crc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CRC");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUserId).HasColumnName("created_user_id");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasColumnName("currency");
            entity.Property(e => e.Czk)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CZK");
            entity.Property(e => e.DetailedServiceDescription)
                .HasColumnType("ntext")
                .HasColumnName("detailed_service_description");
            entity.Property(e => e.Dkk)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DKK");
            entity.Property(e => e.EstimatedDuration).HasColumnName("estimated_duration");
            entity.Property(e => e.EstimatedDurationText)
                .HasMaxLength(64)
                .HasColumnName("estimated_duration_text");
            entity.Property(e => e.Eur)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EUR");
            entity.Property(e => e.ExceptionsReOwnershipIp)
                .HasMaxLength(256)
                .HasColumnName("exceptions_re_ownership_ip");
            entity.Property(e => e.ExceptionsTo30DayPayment)
                .HasMaxLength(256)
                .HasColumnName("exceptions_to_30_day_payment");
            entity.Property(e => e.ExceptionsToMonthlyInvoice)
                .HasMaxLength(512)
                .HasColumnName("exceptions_to_monthly_invoice");
            entity.Property(e => e.ExitCostAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("exit_cost_amount");
            entity.Property(e => e.FileRepositoryId).HasColumnName("file_repository_id");
            entity.Property(e => e.Function)
                .HasMaxLength(128)
                .HasColumnName("function");
            entity.Property(e => e.Gbp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GBP");
            entity.Property(e => e.Huf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUF");
            entity.Property(e => e.Inr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INR");
            entity.Property(e => e.KnownDependencies)
                .HasMaxLength(1024)
                .HasColumnName("known_dependencies");
            entity.Property(e => e.KnownTsaExitCosts)
                .HasMaxLength(512)
                .HasColumnName("known_tsa_exit_costs");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("last_modified_date");
            entity.Property(e => e.LastModifiedUserId).HasColumnName("last_modified_user_id");
            entity.Property(e => e.MaxOptionDuration).HasColumnName("max_option_duration");
            entity.Property(e => e.MonthlyCostForecast)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthly_cost_forecast");
            entity.Property(e => e.MonthlyPricing)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthly_pricing");
            entity.Property(e => e.MonthlyPricingText)
                .HasMaxLength(32)
                .HasColumnName("monthly_pricing_text");
            entity.Property(e => e.Mxn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MXN");
            entity.Property(e => e.NoticeOfTermNum).HasColumnName("notice_of_term_num");
            entity.Property(e => e.NoticeOfTerminationText)
                .HasMaxLength(128)
                .HasColumnName("notice_of_termination_text");
            entity.Property(e => e.NumOfUnits)
                .HasMaxLength(128)
                .HasColumnName("num_of_units");
            entity.Property(e => e.OptionExercisedFlag)
                .HasMaxLength(24)
                .HasColumnName("option_exercised_flag");
            entity.Property(e => e.OptionFlag)
                .HasMaxLength(8)
                .HasColumnName("option_flag");
            entity.Property(e => e.OriginalEndDate).HasColumnName("original_end_date");
            entity.Property(e => e.Php)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHP");
            entity.Property(e => e.Pln)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLN");
            entity.Property(e => e.PricePerUnit)
                .HasMaxLength(128)
                .HasColumnName("price_per_unit");
            entity.Property(e => e.PrimaryOwner)
                .HasMaxLength(640)
                .HasColumnName("primary_owner");
            entity.Property(e => e.ProviderOwner)
                .HasMaxLength(640)
                .HasColumnName("provider_owner");
            entity.Property(e => e.ReceiverOwner)
                .HasMaxLength(640)
                .HasColumnName("receiver_owner");
            entity.Property(e => e.Revision).HasColumnName("revision");
            entity.Property(e => e.SeparationOrStandalone)
                .HasMaxLength(32)
                .HasColumnName("separation_or_standalone");
            entity.Property(e => e.ServiceExceptions)
                .HasMaxLength(1024)
                .HasColumnName("service_exceptions");
            entity.Property(e => e.ServiceLocation)
                .HasMaxLength(512)
                .HasColumnName("service_location");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(512)
                .HasColumnName("service_name");
            entity.Property(e => e.Sgd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SGD");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.SubFunction)
                .HasMaxLength(128)
                .HasColumnName("sub_function");
            entity.Property(e => e.TaxDetermination)
                .HasMaxLength(256)
                .HasColumnName("tax_determination");
            entity.Property(e => e.TsaExitApproach)
                .HasMaxLength(512)
                .HasColumnName("tsa_exit_approach");
            entity.Property(e => e.TsaId)
                .HasMaxLength(24)
                .HasColumnName("tsa_id");
            entity.Property(e => e.TsaSubId)
                .IsRequired()
                .HasMaxLength(24)
                .HasColumnName("tsa_sub_id");
            entity.Property(e => e.TsaVsRtsa)
                .HasMaxLength(16)
                .HasColumnName("tsa_vs_rtsa");
            entity.Property(e => e.UnitDescription)
                .HasMaxLength(1024)
                .HasColumnName("unit_description");
            entity.Property(e => e.Usd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("USD");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}